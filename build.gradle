import org.gradle.api.tasks.bundling.Tar

import org.gradle.api.DefaultTask
import org.gradle.api.tasks.Input
import org.gradle.api.tasks.OutputFile
import org.gradle.api.tasks.TaskAction
import org.gradle.api.Project

ext.build_script_dir = "${projectDir.path}/build_script"

ext.isDefaultEnvironment = !project.hasProperty('overrideBuildEnvironment')

File getEnvironmentScript()
{
  final File env = file(isDefaultEnvironment ? 'defaultEnvironment.gradle' : project.overrideBuildEnvironment)
  assert env.isFile() : "The environment script [$env] does not exists or is not a file."
  return env
}

apply from: environmentScript

externalDependency = [
    'avro': 'org.apache.avro:avro:1.4.0',
    'commonsBeanutils': 'commons-beanutils:commons-beanutils:1.7.0',
    'commonsCli': 'commons-cli:commons-cli:1.2',
    'commonsCodec': 'commons-codec:commons-codec:1.6',
    'commonsCollections': 'commons-collections:commons-collections:3.2.1',
    'commonsIo': 'commons-io:commons-io:1.4',
    'commonsLang': 'commons-lang:commons-lang:2.5',
    'commonsLogging': 'commons-logging:commons-logging:1.1',
    'commonsParent': 'org.apache.commons:commons-parent:5',
    'easymock': 'org.easymock:easymock:3.1',
    'easymockext': 'org.easymock:easymockclassextension:3.1',
    'googleCollections': 'com.google.collections:google-collections:1.0-rc2',
    'hadoopCore': 'org.apache.hadoop:hadoop-core:0.20.2',
    'jacksonCoreAsl': 'org.codehaus.jackson:jackson-core-asl:1.8.5',
    'jacksonMapperAsl': 'org.codehaus.jackson:jackson-mapper-asl:1.8.5',
    'jline': 'jline:jline:1.0',
    'json': 'org.json:json:20070829',
    'junit': 'junit:junit:4.8.1',
    'log4j': 'log4j:log4j:1.2.15',
    'luceneAnalyzers': 'org.apache.lucene:lucene-analyzers:2.9.1',
    'luceneCore': 'org.apache.lucene:lucene-core:2.9.1',
    'luceneQueries': 'org.apache.lucene:lucene-queries:2.9.1',
    'mysqlConnectorJava': 'org.mysql:mysql-connector-java:5.1.14',
    'netty': 'org.jboss.netty:netty:3.2.4.Final',
    'snakeyaml': 'org.yaml:snakeyaml:1.8',
    'spring': 'org.springframework:spring:2.5.5',
    'testng': 'org.testng:testng:6.4',
    'zkclient': 'zkclient:zkclient:0.2.0',
    'zkclientHelix': 'com.github.sgroschupf:zkclient:0.1',
    'zookeeper': 'org.apache.zookeeper:zookeeper:3.3.3',
    'ojdbc6': 'com.oracle:ojdbc6:11.2.0.2.0',
    'databusEvents': 'com.linkedin.databus-events:databus-events:3.0.100',
    'databusSchemas': 'com.linkedin.databus-events:databus-schemas:3.0.100',
    'espressoSchema': 'com.linkedin.espresso:espresso-schema-impl:0.8.1602',
    'espressoCommonImpl': 'com.linkedin.espresso:espresso-common-impl:0.8.1602',
    'espressoStoreImpl': 'com.linkedin.espresso:espresso-store-impl:0.8.1602',
    'helixCore': 'org.apache.helix:helix-core:0.6.1.3',
    'or': 'com.linkedin.dds-mysql:open-replicator-impl:1.0.63'
];

if (System.getProperty('open_source') != null) {
  externalDependency['mysqlConnectorJava'] = 'mysql:mysql-connector-java:5.1.14'
  externalDependency['helixCore'] = 'org.apache.helix:helix-core:0.6.1-incubating'
  externalDependency['or'] = 'com.google:open-replicator:1.0.5'
  // OpenReplicator needs slf4j
  externalDependency['log4j'] = 'org.slf4j:slf4j-log4j12:1.6.1'
  externalDependency.remove('databusEvents')
  externalDependency.remove('databusSchemas')
  externalDependency.remove('espressoSchema')
  externalDependency.remove('espressoCommonImpl')
  externalDependency.remove('espressoStoreImpl')

  println "Open source repositories used:"
  project(':databus-core:databus-core-container').repositories.each { repo->
    println(repo.getName())
  }
}

if (!isDefaultEnvironment)
{
  externalDependency.each { overrideDepKey, overrideDepValue ->
    if (externalDependency[overrideDepKey] != null)
    {
      externalDependency[overrideDepKey] = overrideDepValue
    }
  }
}

allprojects {
  tasks.withType(Compile).all { Compile compile ->
    compile.options.compilerArgs = ['-Xlint', '-Xlint:-path']
  }
  /* workaround for GRADLE-2243 (http://issues.gradle.org/browse/GRADLE-2243) */
  tasks.withType(FindBugs) {
	ignoreFailures=true
	effort="max"
	reportLevel="low"
	def f = new File("${project.projectDir}", "FindBugs-excludes.xml")
	if ( f.exists()) {
		println("Using FindBugs excludes:" + f.getAbsolutePath())
		excludeFilter= file("${project.projectDir}/FindBugs-excludes.xml")
	}
  }
}

task wrapper(type: Wrapper) {
  gradleVersion = '1.3'
}

class GitLIGenerateClasspath extends DefaultTask {

  public static final String TASK_NAME = "gitLIGenerateClasspath"

  @OutputFile
  File classpathFile = project.file("${project.buildDir}/${project.name}.classpath")

  @Input String configurationName = "default"

  public GitLIGenerateClasspath() {
      this.outputs.upToDateWhen { false }
  }

  @TaskAction
  def generateClasspath() {
    def configuration = project.configurations.getByName(configurationName)
    def runtimePath = configuration.resolve().join(":")

    classpathFile.write(runtimePath + ":" + configuration.allArtifacts.files.getAsPath())
  }
}
/* Uncomment for Cobertura integration */
/*
buildscript {

    apply from: 'https://github.com/valkolovos/gradle_cobertura/raw/master/repo/gradle_cobertura/gradle_cobertura/1.0/coberturainit.gradle'
}
*/

subprojects {

  plugins.withType(JavaPlugin) {

   // Please see TOOLS-17168, regarding how runtime dependencies can
   // get interpreted as compile time dependency
   // configurations.compile.exclude module: 'ojdbc6'

    plugins.apply('eclipse')
    plugins.apply('idea')

	if (System.getProperty('open_source') != null) {
	    plugins.apply('findbugs')
	}

    sourceCompatibility = JavaVersion.VERSION_1_6
    configurations {

      all*.exclude group: 'com.sun.jdmk', module: 'jmxtools'
      all*.exclude group: 'com.sun.jmx', module: 'jmxri'
      all*.exclude group: 'javax.jms', module: 'jms'

      /* Uncomment for Cobertura integration */
      // testRuntime.exclude group: 'net.sourceforge.cobertura', module: 'cobertura'

      testArtifacts
    }

    // Default dependencies for all subprojects
    dependencies {
        runtime externalDependency.log4j
        // Force easymock to version 3.1. One of the espresso dependencies changes it to 2.4
        // and v2.4 does not support mocking of classes, causing our espresso unit tests
        // to break.
        runtime(externalDependency.easymock) {
            force = true
        }
        compile(externalDependency.easymock) {
            force = true
        }
    }

    if (System.getProperty('open_source') == null) {
      def gitLIGenerateClasspath = project.tasks.add(name: GitLIGenerateClasspath.TASK_NAME, type: GitLIGenerateClasspath.class)
      jar.dependsOn gitLIGenerateClasspath
    }

    if (isDefaultEnvironment) {
      task sourcesJar(type: Jar, dependsOn: classes) {
        from sourceSets.main.allSource
        classifier = 'sources'
      }

      task javadocJar(type: Jar, dependsOn: javadoc) {
        from javadoc.destinationDir
        classifier = 'javadoc'
      }

      artifacts {
        archives sourcesJar
        archives javadocJar
      }
    }
    task testJar(type: Jar){
      from sourceSets.test.output
      classifier = 'tests'
    }

    artifacts {
      testArtifacts testJar
    }

    test {
      	maxHeapSize = '6200m'
        jvmArgs '-XX:MaxDirectMemorySize=8192m', '-XX:PermSize=512M', '-XX:MaxPermSize=1024M',  '-ea', '-verbose:gc', '-Xloggc:/tmp/test-gc.log', '-XX:+PrintGCDetails', '-XX:+PrintGCDateStamps', '-XX:+UseConcMarkSweepGC', '-XX:+UseParNewGC', '-XX:CMSInitiatingOccupancyFraction=75', '-XX:+UseCMSInitiatingOccupancyOnly', '-XX:NewSize=256m', '-XX:MaxNewSize=256m'
        useTestNG()

        /* Uncomment for Cobertura integration */
        /*
        project.task("cleanTest", type: Delete) {
            description = "Cleans the results of the 'test' task and makes it out-of-date"
            delete outputs.files
        }
        */
        doFirst { desc->
          logger.lifecycle("Running task: " + desc);
        }
        beforeTest { desc->
          logger.lifecycle("Running test: " + desc);
        }
    }
  }

  task cleanBuildDir(type: Exec){
    delete(rootDir.toString()+'build')
    commandLine = ['rm', '-rf', rootDir.toString() + '/build']
    workingDir = file(rootDir.toString())
  }

  task makedir(type:Exec){
    // gradle mkdir does not create dir with "-p" flag on so this is a generic task that takes -Ddirpath=..... parameter
    // Usage examples:
    // gradle makedir -Ddirpath=abc/xyz
    def dir = System.getProperties()['dirpath'] ?: null
    if (dir != null){
      commandLine = ['mkdir','-p', dir]
      workingDir = file(rootDir.toString())
    }
  }
}

if (!System.getProperty('open_source')) {
    // ======= Integration tests group 1 ======
    task test_group1 << {
    }
    //Add the tests to be run as part of this group as dependencies
    test_group1.dependsOn ':integration-test:integration-test-espresso:leaderElectionTests', ':integration-test:integration-test-espresso:staticHelixIntegrationTests', ':integration-test:integration-test-gg:ggAllTests', ':integration-test:integration-test-integ-ng:integTests'

    // ======= Integration tests group 2 =======
    task test_group2 << {
    }
    //Add the tests to be run as part of this group as dependencies
    test_group2.dependsOn ':integration-test:integration-test-espresso:espressoClientTests'

    // ======= Integration tests group 3 ======
    task test_group3 << {
    }
    //Add the tests to be run as part of this group as dependencies
    test_group3.dependsOn ':integration-test:integration-test-espresso:espressoDynamicRelayTests'

    // ======= Integration tests group 4 =====
    task test_group4 << {
    }
    //Add the tests to be run as part of this group as dependencies
    test_group4.dependsOn ':integration-test:integration-test-espresso:espressoRpldbusAndMultipartitionTests', ':integration-test:integration-test-espresso:espressoBootstrapTests'

    // ======= Integration tests group 5 =====
    task test_group5 << {
    }
    //Add the tests to be run as part of this group as dependencies
    test_group5.dependsOn ':integration-test:integration-test-integ:integTests', ':integration-test:integration-test-or:openReplicatorTests'
}
